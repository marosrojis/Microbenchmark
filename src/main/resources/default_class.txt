package cz.rojik;

import java.util.concurrent.TimeUnit;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.profile.GCProfiler;
import org.openjdk.jmh.profile.StackProfiler;
import org.openjdk.jmh.results.format.ResultFormatType;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
[config.libraries]

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
@Warmup(iterations = [config.warmup])
@Measurement(iterations = [config.measurement])
public class [config.className] {

	[microbenchmark.declare]

	@Setup(Level.Trial)
	public void init() {
		[microbenchmark.init]
	}

[microbenchmark.testMethods]

	public static void main(String[] args) throws RunnerException {

		Options options = new OptionsBuilder()
				.include(Microbenchmark.class.getSimpleName()).threads(1)
				.forks(1).shouldFailOnError(true).shouldDoGC(true)
				.result("[config.resultFile]")
				.resultFormat(ResultFormatType.JSON)
				.jvmArgs("-server").build();
		new Runner(options).run();

	}
}